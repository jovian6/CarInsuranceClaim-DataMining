# -*- coding: utf-8 -*-
"""PROYEK DATMIN 2021.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ts56MtwhqctN8tGHp2Xx5JOfcz69tEA-
"""

from google.colab import drive 
drive.mount('/content/gdrive')

import pandas as pd
import numpy as np

dataset = pd.read_csv("/content/gdrive/My Drive/Python Statdas/Car_Insurance_Claim_column.csv", delimiter = ";")

print(dataset)

print(dataset.info())
print(dataset.describe())

nama_kolom = dataset.columns
print(nama_kolom)

#Encode categorical features as an integer array (TRANFORMATION) 
from sklearn.preprocessing import OrdinalEncoder

ord_enc = OrdinalEncoder()
dataset["AGE"] = ord_enc.fit_transform(dataset[["AGE"]])
dataset["GENDER"] = ord_enc.fit_transform(dataset[["GENDER"]])
dataset["RACE"] = ord_enc.fit_transform(dataset[["RACE"]])
dataset["DRIVING_EXPERIENCE"] = ord_enc.fit_transform(dataset[["DRIVING_EXPERIENCE"]])
dataset["EDUCATION"] = ord_enc.fit_transform(dataset[["EDUCATION"]])
dataset["INCOME"] = ord_enc.fit_transform(dataset[["INCOME"]])
dataset["VEHICLE_YEAR"] = ord_enc.fit_transform(dataset[["VEHICLE_YEAR"]])
dataset["VEHICLE_TYPE"] = ord_enc.fit_transform(dataset[["VEHICLE_TYPE"]])

dataset.head(20)

#Alternative to Handle Missing Values(CLEANING)
#Drop NA 
data_cleaned_dropNA = dataset.dropna()
#print(data_cleaned_dropNA)
#print(data_cleaned_dropNA.shape)

#Fill NA with Mean Values 
data_cleaned_Mean = dataset.fillna(dataset.mean())
#data_cleaned_Mean.head(20)

#Fill NA with Median Values
data_cleaned_Median = dataset.fillna(dataset.median())
#data_cleaned_Median.head(20)

#Fill NA with Max Values
data_cleaned_Max = dataset.fillna(dataset.max())
#data_cleaned_Max.head(20)

#Fill NA with Min Values
data_cleaned_Min = dataset.fillna(dataset.min())
#data_cleaned_Min.head(20)

#Fill NA with Std Values
data_cleaned_Std = dataset.fillna(dataset.std())
#data_cleaned_Std.head(20)

#Fill NA with Quantile 25% Values
data_cleaned_q25 = dataset.fillna(dataset.quantile(0.25))
#data_cleaned_q25.head(20)

#Fill NA with Quantile 50% Values / Median
data_cleaned_q50 = dataset.fillna(dataset.quantile(0.50))
#data_cleaned_q50.head(20)

#Fill NA with Quantile 75% Values
data_cleaned_q75 = dataset.fillna(dataset.quantile(0.75))
#data_cleaned_q75.head(20)

#Fill NA with KNN Values
data_NA = dataset[dataset.isna().any(axis=1)]
#data_NA.head(20)
data_NA = data_NA.reset_index(drop=True)

X_train = data_cleaned_dropNA.drop(['ID','CREDIT_SCORE','OUTCOME','ANNUAL_MILEAGE','POSTAL_CODE'], axis=1)
y_test_credit = data_cleaned_dropNA['CREDIT_SCORE']
y_test_annual = data_cleaned_dropNA['ANNUAL_MILEAGE']

X_test = data_NA.drop(['ID','CREDIT_SCORE','OUTCOME','ANNUAL_MILEAGE','POSTAL_CODE'], axis=1)

from sklearn.neighbors import KNeighborsClassifier
neigh = KNeighborsClassifier(n_neighbors=3)

from sklearn import preprocessing
from sklearn import utils
lab_enc = preprocessing.LabelEncoder()
encoded = lab_enc.fit_transform(y_test_credit)
print(utils.multiclass.type_of_target(y_test_credit))
print(utils.multiclass.type_of_target(y_test_credit.astype('float')))
print(utils.multiclass.type_of_target(encoded))

neigh.fit(X_train, encoded)
y_pred_credit = neigh.predict(X_test)
#print(y_pred_credit)

neigh.fit(X_train, y_test_annual)
y_pred_annual = neigh.predict(X_test)
#print(neigh.predict(y_pred_annual))

for idx, x in enumerate(data_NA['CREDIT_SCORE']):
  if (pd.isna(x)):
    data_NA.CREDIT_SCORE[idx] = y_pred_credit[idx]

for idx, x in enumerate(data_NA['ANNUAL_MILEAGE']):
  if (pd.isna(x)):
    data_NA.ANNUAL_MILEAGE[idx] = y_pred_annual[idx]

#data_NA.head(20)
dataset_KNN = data_cleaned_dropNA.append(data_NA)

#Test dataset with ....
dataset = data_cleaned_Mean

#Checking Correlation
dataset.corr(method ='kendall')

#Dimention Checking
print("Dataset Shape : ", dataset.shape)
print("\nDataset Info : ")
print(dataset.info())
print("\nDataset Describe : ", dataset.describe())

#Outliers
print("Shape Awal:", dataset.shape)

Q1 = dataset['AGE'].quantile(0.25)
Q3 = dataset['AGE'].quantile(0.75)
IQR = Q3 - Q1
dataset = dataset[~((dataset['AGE'] < (Q1 - 1.5 * IQR)) | (dataset['AGE'] > (Q3 + 1.5 * IQR)))] #remove
print("After AGE:", dataset.shape)

Q1 = dataset['GENDER'].quantile(0.25)
Q3 = dataset['GENDER'].quantile(0.75)
IQR = Q3 - Q1
dataset = dataset[~((dataset['GENDER'] < (Q1 - 1.5 * IQR)) | (dataset['GENDER'] > (Q3 + 1.5 * IQR)))]
print("After GENDER:", dataset.shape)

Q1 = dataset['RACE'].quantile(0.25)
Q3 = dataset['RACE'].quantile(0.75)
IQR = Q3 - Q1
#dataset = dataset[~((dataset['RACE'] < (Q1 - 1.5 * IQR)) | (dataset['RACE'] > (Q3 + 1.5 * IQR)))]
print("After RACE:", dataset.shape)

Q1 = dataset['DRIVING_EXPERIENCE'].quantile(0.25)
Q3 = dataset['DRIVING_EXPERIENCE'].quantile(0.75)
IQR = Q3 - Q1
dataset = dataset[~((dataset['DRIVING_EXPERIENCE'] < (Q1 - 1.5 * IQR)) | (dataset['DRIVING_EXPERIENCE'] > (Q3 + 1.5 * IQR)))]
print("After DRIVING_EXPERIENCE:", dataset.shape)

Q1 = dataset['EDUCATION'].quantile(0.25)
Q3 = dataset['EDUCATION'].quantile(0.75)
IQR = Q3 - Q1
dataset = dataset[~((dataset['EDUCATION'] < (Q1 - 1.5 * IQR)) | (dataset['EDUCATION'] > (Q3 + 1.5 * IQR)))]
print("After EDUCATION:", dataset.shape)

Q1 = dataset['INCOME'].quantile(0.25)
Q3 = dataset['INCOME'].quantile(0.75)
IQR = Q3 - Q1
dataset = dataset[~((dataset['INCOME'] < (Q1 - 1.5 * IQR)) | (dataset['INCOME'] > (Q3 + 1.5 * IQR)))]
print("After INCOME:", dataset.shape)

Q1 = dataset['CREDIT_SCORE'].quantile(0.25)
Q3 = dataset['CREDIT_SCORE'].quantile(0.75)
IQR = Q3 - Q1
dataset = dataset[~((dataset['CREDIT_SCORE'] < (Q1 - 1.5 * IQR)) | (dataset['CREDIT_SCORE'] > (Q3 + 1.5 * IQR)))]
print("After CREDIT_SCORE:", dataset.shape)

Q1 = dataset['VEHICLE_OWNERSHIP'].quantile(0.25)
Q3 = dataset['VEHICLE_OWNERSHIP'].quantile(0.75)
IQR = Q3 - Q1
dataset = dataset[~((dataset['VEHICLE_OWNERSHIP'] < (Q1 - 1.5 * IQR)) | (dataset['VEHICLE_OWNERSHIP'] > (Q3 + 1.5 * IQR)))]
print("After VEHICLE_OWNERSHIP:", dataset.shape)

Q1 = dataset['VEHICLE_YEAR'].quantile(0.25)
Q3 = dataset['VEHICLE_YEAR'].quantile(0.75)
IQR = Q3 - Q1
dataset = dataset[~((dataset['VEHICLE_YEAR'] < (Q1 - 1.5 * IQR)) | (dataset['VEHICLE_YEAR'] > (Q3 + 1.5 * IQR)))]
print("After VEHICLE_YEAR:", dataset.shape)

Q1 = dataset['MARRIED'].quantile(0.25)
Q3 = dataset['MARRIED'].quantile(0.75)
IQR = Q3 - Q1
dataset = dataset[~((dataset['MARRIED'] < (Q1 - 1.5 * IQR)) | (dataset['MARRIED'] > (Q3 + 1.5 * IQR)))]
print("After MARRIED:", dataset.shape)

Q1 = dataset['ANNUAL_MILEAGE'].quantile(0.25)
Q3 = dataset['ANNUAL_MILEAGE'].quantile(0.75)
IQR = Q3 - Q1
dataset = dataset[~((dataset['ANNUAL_MILEAGE'] < (Q1 - 1.5 * IQR)) | (dataset['ANNUAL_MILEAGE'] > (Q3 + 1.5 * IQR)))]
print("After ANNUAL_MILEAGE:", dataset.shape)

Q1 = dataset['VEHICLE_TYPE'].quantile(0.25)
Q3 = dataset['VEHICLE_TYPE'].quantile(0.75)
IQR = Q3 - Q1
dataset = dataset[~((dataset['VEHICLE_TYPE'] < (Q1 - 1.5 * IQR)) | (dataset['VEHICLE_TYPE'] > (Q3 + 1.5 * IQR)))]
print("After VEHICLE_TYPE:", dataset.shape)

Q1 = dataset['SPEEDING_VIOLATIONS'].quantile(0.25)
Q3 = dataset['SPEEDING_VIOLATIONS'].quantile(0.75)
IQR = Q3 - Q1
#dataset = dataset[~((dataset['SPEEDING_VIOLATIONS'] < (Q1 - 1.5 * IQR)) | (dataset['SPEEDING_VIOLATIONS'] > (Q3 + 1.5 * IQR)))]
print("After SPEEDING_VIOLATIONS:", dataset.shape)

Q1 = dataset['DUIS'].quantile(0.25)
Q3 = dataset['DUIS'].quantile(0.75)
IQR = Q3 - Q1
#dataset = dataset[~((dataset['DUIS'] < (Q1 - 1.5 * IQR)) | (dataset['DUIS'] > (Q3 + 1.5 * IQR)))]
print("After DUIS:", dataset.shape)

Q1 = dataset['PAST_ACCIDENTS'].quantile(0.25)
Q3 = dataset['PAST_ACCIDENTS'].quantile(0.75)
IQR = Q3 - Q1
#dataset = dataset[~((dataset['PAST_ACCIDENTS'] < (Q1 - 1.5 * IQR)) | (dataset['PAST_ACCIDENTS'] > (Q3 + 1.5 * IQR)))]
print("After PAST_ACCIDENTS:", dataset.shape)

dataset_new = dataset.drop(['ID','OUTCOME','POSTAL_CODE'], axis=1)
dataset_new.boxplot(figsize=(24,6))

#Normalization
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
scaler = scaler.fit_transform(dataset)

dataset = pd.DataFrame(scaler)
dataset.columns = nama_kolom
dataset.head()
print(dataset.info())

#Deduplikasi Data
dataset.drop_duplicates(inplace=True)
print(dataset.shape)

#Library
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB, BernoulliNB
from sklearn.metrics import classification_report, confusion_matrix

#Function
def reshape(lst1, lst2):
    last = 0
    res = []
    for ele in list1:
        res.append(lst2[last : last + len(ele)])
        last += len(ele)          
    return res

#Spliting Data
X = dataset.drop(['ID','OUTCOME','POSTAL_CODE'], axis=1)
y = dataset['OUTCOME']
X = pd.get_dummies(X, drop_first=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

print(dataset.info())

#Naive Bayes
gnb = BernoulliNB()
y_pred = gnb.fit(X_train, y_train).predict(X_test)

print(y_pred)
print(classification_report(y_test, y_pred))
print(gnb.score(X_train, y_train))
print("\nConfusion Matrix: \n",confusion_matrix(y_test, y_pred))

#Input Naive Bayes
list1 = [['AGE','GENDER','RACE','DRIVING_EXPERIENCE','EDUCATION','INCOME','CREDIT_SCORE','VEHICLE_OWNERSHIP','VEHICLE_YEAR','MARRIED','CHILDREN','ANNUAL_MILEAGE','VEHICLE_TYPE','SPEEDING_VIOLATIONS','DUIS','PAST_ACCIDENTS']]
list2 = []

for i in range(0, 16):
  if (i == 0):
    print('[0] 16-25')
    print('[1] 26-39')
    print('[2] 40-64')
    print('[3] 65+')
    print('Choose Age [] : ')
  
  if (i == 1):
    print('[0] female')
    print('[1] male')
    print('Choose Gender [] : ')

  if (i == 2):
    print('[0] majority')
    print('[1] minority')
    print('Choose Race [] : ')

  if (i == 3):
    print('[0] 0-9y')
    print('[1] 10-19y')
    print('[2] 20-29y')
    print('[3] 30y+')
    print('Choose Driving Experience [] : ')

  if (i == 4):
    print('[0] high school')
    print('[1] none')
    print('[2] university')
    print('Choose Education [] : ')

  if (i == 5):
    print('[0] middle class')
    print('[1] poverty')
    print('[2] upper class')
    print('[3] working class')
    print('Choose Income [] : ')

  if (i == 6):
    print('Fill Credit_Score (FLoat ~ Max 1) : ')

  if (i == 7):
    print('[0] No')
    print('[1] Yes')
    print('Choose Vehicle Ownership [] : ')

  if (i == 8):
    print('[0] after 2015')
    print('[1] before 2015')
    print('Choose Vehicle Year [] : ')

  if (i == 9):
    print('[0] No')
    print('[1] Yes')
    print('Choose Married [] : ')

  if (i == 10):
    print('[0] No')
    print('[1] Yes')
    print('Choose Children [] : ')

  if (i == 11):
    print('Choose Annual Milage (2000 - 22000): ')

  if (i == 12):
    print('[0] sedan')
    print('[1] sports car')
    print('Choose Vehicle Type [] : ')

  if (i == 13):
    print('Choose Speeding Violations (0 - 22): ')

  if (i == 14):
    print('Choose Annual Duis (0 - 6): ')

  if (i == 15):
    print('Choose Annual Past Accident (0 - 15): ')

  ele  = float(input())

  #Normalisasi Manual utk input
  if (i == 1 | i == 2 | i == 7 | i == 2 | i == 8 | i == 9 | i == 10 | i == 12):
    ele = ele
  if (i == 0 | i == 3| i ==5):
    ele = ele/3
  if (i == 4):
    ele = ele/2
  if (i == 6):
    ele = (ele-0.05335754546)/(0.9608188278-0.05335754546)
  if (i == 11):
    ele = (ele-2000)/20000
  if (i == 13):
    ele = (ele)/22
  if (i == 14):
    ele = (ele)/6
  if (i == 15):
    ele = (ele)/15

  if(ele > 1):
    ele = 1
  if(ele < 0):
    ele = 0

  list2.append(ele)
a = reshape(list1, list2)
#print(a)

y_pred = gnb.fit(X_train, y_train).predict(a)

if(y_pred == 1.0):    
    print("OUTCOME : Yes")
if(y_pred == 0.0):    
    print("OUTCOME : No")

#Decision Tree
from sklearn.tree import DecisionTreeClassifier

model = DecisionTreeClassifier()
model = model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print(y_pred)

print(model.score(X_train, y_train))
print(classification_report(y_test, y_pred))

print("Confusion Matrix: \n", confusion_matrix(y_test, y_pred))

#Input Decision Tree
from sklearn.tree import DecisionTreeClassifier
list1 = [['AGE','GENDER','RACE','DRIVING_EXPERIENCE','EDUCATION','INCOME','CREDIT_SCORE','VEHICLE_OWNERSHIP','VEHICLE_YEAR','MARRIED','CHILDREN','POSTAL_CODE','ANNUAL_MILEAGE','VEHICLE_TYPE','SPEEDING_VIOLATIONS','DUIS','PAST_ACCIDENTS']]
list2 = []

for i in range(0, 16):
  if (i == 0):
    print('[0] 16-25')
    print('[1] 26-39')
    print('[2] 40-64')
    print('[3] 65+')
    print('Choose Age [] : ')
  
  if (i == 1):
    print('[0] female')
    print('[1] male')
    print('Choose Gender [] : ')

  if (i == 2):
    print('[0] majority')
    print('[1] minority')
    print('Choose Race [] : ')

  if (i == 3):
    print('[0] 0-9y')
    print('[1] 10-19y')
    print('[2] 20-29y')
    print('[3] 30y+')
    print('Choose Driving Experience [] : ')

  if (i == 4):
    print('[0] high school')
    print('[1] none')
    print('[2] university')
    print('Choose Education [] : ')

  if (i == 5):
    print('[0] middle class')
    print('[1] poverty')
    print('[2] upper class')
    print('[3] working class')
    print('Choose Income [] : ')

  if (i == 6):
    print('Fill Credit_Score (FLoat ~ Max 1) : ')

  if (i == 7):
    print('[0] No')
    print('[1] Yes')
    print('Choose Vehicle Ownership [] : ')

  if (i == 8):
    print('[0] after 2015')
    print('[1] before 2015')
    print('Choose Vehicle Year [] : ')

  if (i == 9):
    print('[0] No')
    print('[1] Yes')
    print('Choose Married [] : ')

  if (i == 10):
    print('[0] No')
    print('[1] Yes')
    print('Choose Children [] : ')

  if (i == 11):
    print('Choose Annual Milage (2000 - 22000): ')

  if (i == 12):
    print('[0] sedan')
    print('[1] sports car')
    print('Choose Vehicle Type [] : ')

  if (i == 13):
    print('Choose Speeding Violations (0 - 22): ')

  if (i == 14):
    print('Choose Annual Duis (0 - 6): ')

  if (i == 15):
    print('Choose Annual Past Accident (0 - 15): ')

  ele  = float(input())

  #Normalisasi Manual utk input
  if (i == 1 | i == 2 | i == 7 | i == 2 | i == 8 | i == 9 | i == 10 | i == 12):
    ele = ele
  if (i == 0 | i == 3| i ==5):
    ele = ele/3
  if (i == 4):
    ele = ele/2
  if (i == 6):
    ele = (ele-0.05335754546)/(0.9608188278-0.05335754546)
  if (i == 11):
    ele = (ele-2000)/20000
  if (i == 13):
    ele = (ele)/22
  if (i == 14):
    ele = (ele)/6
  if (i == 15):
    ele = (ele)/15

  if(ele > 1):
    ele = 1
  if(ele < 0):
    ele = 0

  list2.append(ele)
a = reshape(list1, list2)
#print(a)

model = model.fit(X_train, y_train)
y_pred = model.predict(a)

if(y_pred == 1.0):    
    print("OUTCOME : Yes")
if(y_pred == 0.0):    
    print("OUTCOME : No")